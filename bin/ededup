#!/bin/sh

jscpd --ignore "**/*.min.js,**/*.map,./node_modules/**,./dist/**" --reporters html --silent --output dedup-report "$@"

echo " \
    function docReady(fn) { \
        /* see if DOM is already available */ \
        if (document.readyState === \"complete\" || document.readyState === \"interactive\") { \
            setTimeout(fn, 1); \
        } else { \
            document.addEventListener(\"DOMContentLoaded\", fn); \
        } \
    } \
    function Filter() { \
        var filter = document.querySelector('#filter'); \
        document \
            .querySelectorAll('.clone-title') \
            .forEach( \
                dataPiece =>  \
                    dataPiece.parentElement.parentElement.style.display = dataPiece.textContent.includes(filter.value) ? 'block' : 'none'); \
    } \
    var codeLinesRegex = /\[([0-9]+).[0-9]+\s.\s([0-9]+).[0-9]+\].+\[([0-9]+).[0-9]+\s.\s([0-9]+).[0-9]+\]/gm; \
    docReady(function() { \
        var controls = document.getElementsByClassName('controls')[0]; \
        controls.innerHTML = '<input style=\"margin-right: 8px;\" id=\"filter\" oninput=\"Filter()\" placeholder=\"Filter\"></input>' + controls.innerHTML; \
        var nodes = document.querySelectorAll('.clone-title'); \
        for(var nodei in nodes) { \
            var node = nodes[nodei]; \
            codeLinesRegex.lastIndex = 0; \
            var match = codeLinesRegex.exec(node.innerHTML); \
            if(match && match[1] && match[4]) { \
                var codeLinesAmount1 = Math.abs(match[2] - match[1]); \
                var codeLinesAmount2 = Math.abs(match[4] - match[3]); \
                var codeLinesAmount = (codeLinesAmount1 + codeLinesAmount2) / 2; \
                node.innerHTML = node.innerHTML + '<br/> - ' + codeLinesAmount + ' lines of code duplicated'; \
            } \
        } \
 \
 setTimeout(() => {\
        var elements = document.querySelectorAll('.clone'); \
\
        /*Create our function generator*/ \
        function sortBy(regex){ \
        return function(a, b){ \
            var filter_a = parseFloat( a.textContent.match(regex)[1] ); \
            var filter_b = parseFloat( b.textContent.match(regex)[1] ); \
             \
            return filter_a > filter_b \
            ? -1 \
            : (filter_a > filter_b ? 1 : 0); \
        } \
        } \
\
        function sortDom(filter){ \
        /*Transform our nodeList into array and apply sort function */ \
        return [].map.call(elements, function(elm){ \
            return elm; \
        }).sort(sortBy(filter)) \
        } \
\
        /*Sort by left style property*/ \
        var sorted = sortDom(/.*-\s([0-9\.]+) lines of code duplicated/); \
        console.log(sorted); \
        var parentContainer = document.querySelector('.clones.collapsed'); \
        sorted.map(x => parentContainer.insertBefore(x, null)); \
,2000);\
    }); \
" > ./dedup-report/jscpd-report.js
echo "<script type=\"text/javascript\" src=\"./jscpd-report.js\"></script> " >> ./dedup-report/jscpd-report.html


start ./dedup-report/jscpd-report.html || ./dedup-report/jscpd-report.html || (alias chrome="open -a \"Google Chrome\"" && chrome ./dedup-report/jscpd-report.html) || open ./dedup-report/jscpd-report.html || xdg-open ./dedup-report/jscpd-report.html || cygstart ./dedup-report/jscpd-report.html || kfmclient exec ./dedup-report/jscpd-report.html || dolphin ./dedup-report/jscpd-report.html

ret=$?
exit $ret


# var elements = document.querySelectorAll('.clone');

# //Create our function generator
# function sortBy(regex){
#   return function(a, b){
#     var filter_a = parseFloat( a.textContent.match(regex)[1] );
#     var filter_b = parseFloat( b.textContent.match(regex)[1] );
#     //debugger;
#     return filter_a > filter_b
#     ? -1
#     : (filter_a > filter_b ? 1 : 0);
#   }
# }

# function sortDom(filter){
#   //Transform our nodeList into array and apply sort function
#   return [].map.call(elements, function(elm){
#     return elm;
#   }).sort(sortBy(filter))
# }

# //Sort by left style property
# var sorted = sortDom(/.*-\s([0-9\.]+) lines of code duplicated/);
# console.log(sorted);
# var parentContainer = document.querySelector('.clones.collapsed');
# sorted.map(x => parentContainer.insertBefore(x, null));
